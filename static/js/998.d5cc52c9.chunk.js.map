{"version":3,"file":"static/js/998.d5cc52c9.chunk.js","mappings":"mLAEaA,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1B,OAAO,uBAAIA,GACZ,C,qJCFYC,EAAWC,EAAAA,GAAAA,GAAH,iFAMRC,EAASD,EAAAA,GAAAA,KAAH,gFAMNE,EAASF,EAAAA,GAAAA,IAAH,6C,SCkEnB,EAxEqB,WAAO,IAAD,IACzB,GAAwCG,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAM,qBADKC,EAAAA,EAAAA,MACOC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAEvCC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYP,GACTQ,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPd,EAAgBc,GAChBZ,EAAU,WACX,IACAa,OAAM,SAAAZ,GACLC,EAASD,GACTD,EAAU,WACX,GACJ,GAAE,CAACG,IAEJ,IACEW,EAMEjB,EANFiB,YACAC,EAKElB,EALFkB,eACAC,EAIEnB,EAJFmB,SACAC,EAGEpB,EAHFoB,OACAC,EAEErB,EAFFqB,aACAC,EACEtB,EADFsB,aAGF,OACE,2BACc,aAAXpB,IAAyB,SAACT,EAAA,EAAD,CAAWC,QAASU,EAAMV,UACxC,aAAXQ,IACC,4BACE,SAAC,KAAD,CAAMqB,GAAIf,EAAV,sBACA,SAACV,EAAD,CACE0B,IAAG,0CAAqCP,GACxCQ,MAAM,MACNC,OAAO,MACPC,IAAKT,KAEP,kCAAQA,EAAR,aAA2BI,EAAaM,MAAM,EAAG,GAAjD,QACA,6CAAmBC,KAAKC,MAAqB,GAAfT,GAA9B,QACA,sCACA,uBAAIF,KACJ,oCACA,uBACGC,EAAOW,KAAI,SAACC,EAAOC,GAAR,OACV,UAACpC,EAAD,WAAqBmC,EAAME,KAA3B,OAAaD,EADH,OAId,2BACE,SAACtC,EAAD,WACE,SAAC,KAAD,CAAM4B,GAAG,OAAOb,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,SAACb,EAAD,WACE,SAAC,KAAD,CAAM4B,GAAG,UAAUb,MAAO,CAAEC,KAAMH,GAAlC,8BAOR,SAAC,EAAA2B,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,8LC5EKC,EAAW,gCACXC,EAAM,mCAECC,EAAgB,mCAAG,oGACZC,EAAAA,GAAAA,IAAA,UAAaH,EAAb,uCAAoDC,IADxC,cACxBG,EADwB,yBAEvBA,GAFuB,2CAAH,qDAKhB5B,EAAW,mCAAG,WAAMP,GAAN,uFACPkC,EAAAA,GAAAA,IAAA,UAAaH,EAAb,iBAA8B/B,EAA9B,oBAAiDgC,IAD1C,cACnBG,EADmB,yBAElBA,GAFkB,2CAAH,sDAKXC,EAAW,mCAAG,WAAMpC,GAAN,uFACPkC,EAAAA,GAAAA,IAAA,UACbH,EADa,iBACI/B,EADJ,4BAC+BgC,IAFxB,cACnBG,EADmB,yBAIlBA,GAJkB,2CAAH,sDAOXE,EAAc,mCAAG,WAAMrC,GAAN,uFACVkC,EAAAA,GAAAA,IAAA,UACbH,EADa,iBACI/B,EADJ,4BAC+BgC,IAFrB,cACtBG,EADsB,yBAIrBA,GAJqB,2CAAH,sDAOdG,EAAc,mCAAG,WAAMC,GAAN,uFACVL,EAAAA,GAAAA,IAAA,UACbH,EADa,iCACoBC,EADpB,kBACiCO,EADjC,YADU,cACtBJ,EADsB,yBAIrBA,GAJqB,2CAAH,qD","sources":["components/ErrorView/ErrorView.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.js","services/API.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const ErrorView = ({ message }) => {\n  return <b>{message}</b>;\n};\n\nErrorView.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  &&: not(: last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Genres = styled.span`\n  &&: not(: last-child) {\n    margin-right: 8px;\n  }\n`;\n\nexport const Poster = styled.img`\n  margin-top: 16px;\n`;\n","import { useParams, Link, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { getFilmById } from '../../services/API';\nimport { ErrorView } from '../ErrorView/ErrorView';\nimport { ListItem, Genres, Poster } from './MovieDetails.styled';\nimport { Suspense } from 'react';\n\nconst MovieDetails = () => {\n  const [selectedFilm, setSelectedFilm] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backTo = location.state?.from ?? '/';\n\n  useEffect(() => {\n    getFilmById(movieId)\n      .then(({ data }) => {\n        setSelectedFilm(data);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  }, [movieId]);\n\n  const {\n    poster_path,\n    original_title,\n    overview,\n    genres,\n    vote_average,\n    release_date,\n  } = selectedFilm;\n\n  return (\n    <div>\n      {status === 'rejected' && <ErrorView message={error.message} />}\n      {status === 'resolved' && (\n        <div>\n          <Link to={backTo}>Go back</Link>\n          <Poster\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            width=\"189\"\n            height=\"255\"\n            alt={original_title}\n          ></Poster>\n          <h2>{`${original_title} (${release_date.slice(0, 4)})`}</h2>\n          <p>{`User Score: ${Math.round(vote_average * 10)}%`}</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <p>\n            {genres.map((genre, index) => (\n              <Genres key={index}>{genre.name}/ </Genres>\n            ))}\n          </p>\n          <ul>\n            <ListItem>\n              <Link to=\"cast\" state={{ from: backTo }}>\n                Cast\n              </Link>\n            </ListItem>\n            <ListItem>\n              <Link to=\"reviews\" state={{ from: backTo }}>\n                Reviews\n              </Link>\n            </ListItem>\n          </ul>\n        </div>\n      )}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '0322adb5b7f04b7c7a36cb76430c0728';\n\nexport const getTrendingFilms = async () => {\n  const res = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n  return res;\n};\n\nexport const getFilmById = async movieId => {\n  const res = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}`);\n  return res;\n};\n\nexport const getCastById = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return res;\n};\n\nexport const getReviewsById = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return res;\n};\n\nexport const getFilmByQuery = async query => {\n  const res = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}&page=1`\n  );\n  return res;\n};\n"],"names":["ErrorView","message","ListItem","styled","Genres","Poster","useState","selectedFilm","setSelectedFilm","status","setStatus","error","setError","movieId","useParams","backTo","useLocation","state","from","useEffect","getFilmById","then","data","catch","poster_path","original_title","overview","genres","vote_average","release_date","to","src","width","height","alt","slice","Math","round","map","genre","index","name","Suspense","fallback","BASE_URL","KEY","getTrendingFilms","axios","res","getCastById","getReviewsById","getFilmByQuery","query"],"sourceRoot":""}