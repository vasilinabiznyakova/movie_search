{"version":3,"file":"static/js/194.7eb2bc7c.chunk.js","mappings":"mLAEaA,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1B,OAAO,uBAAIA,GACZ,C,uFCFYC,E,OAAWC,GAAAA,GAAH,iF,SCERC,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACT,SAACR,EAAD,WACE,SAAC,KAAD,CAAMS,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMP,GAA1C,SACGG,KAFUC,EADN,KAShB,C,mJCfYI,EAAYX,EAAAA,GAAAA,MAAH,oEAKTY,EAAeZ,EAAAA,GAAAA,OAAH,qL,SCsDzB,EAtDe,WAEb,OAAwCa,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACM,OAAVF,IACJG,QAAQC,IAAIJ,GACZN,EAAU,YACVW,EAAAA,EAAAA,IAAeL,GACZM,MAAK,SAAAC,GACJf,EAAgBe,EAAKA,KAAKC,SAC1Bd,EAAU,WACX,IACAe,OAAM,SAAAd,GACLC,EAASD,GACTD,EAAU,WACX,IACJ,GAAE,CAACM,IAUJ,OADAG,QAAQC,IAAIb,IAEV,6BACE,kBAAMmB,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACff,EAAgB,CAAEC,MAAOa,EAAKE,SAASf,MAAMgB,OAE9C,EAKG,WACE,SAAC5B,EAAD,CAAW6B,KAAK,OAAOC,KAAK,WAC5B,SAAC7B,EAAD,CAAc4B,KAAK,SAAnB,uBAEU,aAAXxB,IAAyB,SAACnB,EAAA,EAAD,CAAWC,QAASoB,EAAMpB,UACxC,YAAXkB,IAAwB,mCACxBF,EAAa4B,OAAS,IACrB,0BACE,SAACzC,EAAA,EAAD,CAAUC,MAAOY,MAGV,OAAVS,GAA0C,IAAxBT,EAAa4B,SAC9B,gGAMP,C,8LCzDKC,EAAW,gCACXC,EAAM,mCAECC,EAAgB,mCAAG,oGACZC,EAAAA,GAAAA,IAAA,UAAaH,EAAb,uCAAoDC,IADxC,cACxBG,EADwB,yBAEvBA,GAFuB,2CAAH,qDAKhBC,EAAW,mCAAG,WAAMC,GAAN,uFACPH,EAAAA,GAAAA,IAAA,UAAaH,EAAb,iBAA8BM,EAA9B,oBAAiDL,IAD1C,cACnBG,EADmB,yBAElBA,GAFkB,2CAAH,sDAKXG,EAAW,mCAAG,WAAMD,GAAN,uFACPH,EAAAA,GAAAA,IAAA,UACbH,EADa,iBACIM,EADJ,4BAC+BL,IAFxB,cACnBG,EADmB,yBAIlBA,GAJkB,2CAAH,sDAOXI,EAAc,mCAAG,WAAMF,GAAN,uFACVH,EAAAA,GAAAA,IAAA,UACbH,EADa,iBACIM,EADJ,4BAC+BL,IAFrB,cACtBG,EADsB,yBAIrBA,GAJqB,2CAAH,sDAOdnB,EAAc,mCAAG,WAAML,GAAN,uFACVuB,EAAAA,GAAAA,IAAA,UACbH,EADa,iCACoBC,EADpB,kBACiCrB,EADjC,YADU,cACtBwB,EADsB,yBAIrBA,GAJqB,2CAAH,qD","sources":["components/ErrorView/ErrorView.js","components/FilmList/FilmList.styled.js","components/FilmList/FilmList.js","pages/Movies.styled.js","pages/Movies.js","services/API.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const ErrorView = ({ message }) => {\n  return <b>{message}</b>;\n};\n\nErrorView.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  &&: not(: last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { ListItem } from './FilmList.styled';\nimport PropTypes from 'prop-types';\n\nexport const FilmList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {films.map(({ title, id }) => (\n        <ListItem key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </ListItem>\n      ))}\n    </ul>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchBox = styled.input`\n  padding: 4px 4px;\n  margin-right: 16px;\n`;\n\nexport const SearchButton = styled.button`\n  display: inline-block;\n  width: 100px;\n  padding: 4px 4px;\n  cursor: pointer;\n  &&: hover {\n    color: white;\n    background-color: OrangeRed;\n  }\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getFilmByQuery } from '../services/API';\nimport { ErrorView } from '../components/ErrorView/ErrorView';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { SearchBox, SearchButton } from './Movies.styled';\n\nconst Movies = () => {\n  // const [searchQuery, setSearchQuery] = useState(null);\n  const [searchedFilm, setSearchedFilm] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query === null) return;\n    console.log(query);\n    setStatus('pending');\n    getFilmByQuery(query)\n      .then(data => {\n        setSearchedFilm(data.data.results);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    // form.reset();\n  };\n\n  console.log(searchedFilm);\n  return (\n    <main>\n      <form onSubmit={handleSubmit}>\n        <SearchBox type=\"text\" name=\"query\" />\n        <SearchButton type=\"submit\">Search</SearchButton>\n      </form>\n      {status === 'rejected' && <ErrorView message={error.message} />}\n      {status === 'pending' && <p>Loading</p>}\n      {searchedFilm.length > 0 && (\n        <div>\n          <FilmList films={searchedFilm} />\n        </div>\n      )}\n      {query !== null && searchedFilm.length === 0 && (\n        <p>\n          Sorry, no films found per your query, please try another key-words\n        </p>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '0322adb5b7f04b7c7a36cb76430c0728';\n\nexport const getTrendingFilms = async () => {\n  const res = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n  return res;\n};\n\nexport const getFilmById = async movieId => {\n  const res = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}`);\n  return res;\n};\n\nexport const getCastById = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return res;\n};\n\nexport const getReviewsById = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return res;\n};\n\nexport const getFilmByQuery = async query => {\n  const res = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}&page=1`\n  );\n  return res;\n};\n"],"names":["ErrorView","message","ListItem","styled","FilmList","films","location","useLocation","map","title","id","to","state","from","SearchBox","SearchButton","useState","searchedFilm","setSearchedFilm","status","setStatus","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","console","log","getFilmByQuery","then","data","results","catch","onSubmit","e","preventDefault","form","currentTarget","elements","value","type","name","length","BASE_URL","KEY","getTrendingFilms","axios","res","getFilmById","movieId","getCastById","getReviewsById"],"sourceRoot":""}